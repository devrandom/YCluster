#cloud-config
autoinstall:
  version: 1
  identity:
    hostname: PLACEHOLDER_HOST
    username: ubuntu
    password: '$y$j9T$VeMbpOLaT99rQzvoSy7IC/$7nKvOFH3ui63TKFPPbhKOo5lbvXXnPBBlpKjIrF.aCB'
  network:
    version: 2
    ethernets:
      primary:
        match:
          name: "enp2s0f0np0"
        dhcp4: false
        addresses: [PLACEHOLDER_IP/24]
        optional: true
        amt:
          match:
            name: "enp89s0"
          optional: true
          addresses:
          - "PLACEHOLDER_AMT_IP/24"
        uplink:
          match:
            name: "enp87s0"
          optional: true
          dhcp4: true
  early-commands:
    - |
      SERVER_IP=$(cat /proc/cmdline | grep -o 'ds=.*s=http://[^/]*' | sed 's/.*http:\/\/\([^\/]*\).*/\1/')
      echo "$SERVER_IP" > /tmp/server_ip
      MAC=$(ip -j link | jq -r '.[] | select(.operstate == "UP" and .address) | .address' | head -1)
      
      # Get the interface name for the MAC address used for PXE boot
      INTERFACE=$(ip -j link | jq -r ".[] | select(.address == \"$MAC\") | .ifname")
      
      # Test which proxy is available and update autoinstall
      if curl -s --connect-timeout 3 --proxy 10.0.0.254:3128 http://detectportal.firefox.com/success.txt >/dev/null 2>&1; then
        PROXY_URL="http://10.0.0.254:3128"
        echo "Using VIP proxy: $PROXY_URL"
      elif curl -s --connect-timeout 3 --proxy 10.0.0.11:3128 http://detectportal.firefox.com/success.txt >/dev/null 2>&1; then
        PROXY_URL="http://10.0.0.11:3128"
        echo "Using s1 proxy: $PROXY_URL"
      elif curl -s --connect-timeout 3 --proxy 10.0.0.1:3128 http://detectportal.firefox.com/success.txt >/dev/null 2>&1; then
        PROXY_URL="http://10.0.0.1:3128"
        echo "Using admin laptop proxy: $PROXY_URL"
      else
        PROXY_URL=""
        echo "No proxy available, using direct connection"
      fi
      
      # Update proxy setting in autoinstall
      if [ -n "$PROXY_URL" ]; then
        sed -i "s|proxy: \".*\"|proxy: \"$PROXY_URL\"|" /autoinstall.yaml
      else
        sed -i '/proxy:/d' /autoinstall.yaml
      fi
      
      # Fetch allocation with error handling - fail fast if server is unreachable
      if ! ALLOCATION=$(curl -f -s "http://$SERVER_IP/api/allocate?mac=$MAC"); then
        echo "ERROR: Failed to get allocation from server $SERVER_IP" >&2
        exit 1
      fi
      
      # Parse allocation response
      HOSTNAME=$(echo "$ALLOCATION" | jq -r '.hostname')
      IP=$(echo "$ALLOCATION" | jq -r '.ip')
      AMT_IP=$(echo "$ALLOCATION" | jq -r '.amt_ip')

      # Validate we got valid responses
      if [ "$HOSTNAME" = "null" ] || [ "$IP" = "null" ] || [ -z "$HOSTNAME" ] || [ -z "$IP" ]; then
        echo "ERROR: Invalid allocation response: $ALLOCATION" >&2
        exit 1
      fi
      
      # Update autoinstall configuration
      sed -i "s/hostname: PLACEHOLDER_HOST/hostname: $HOSTNAME/" /autoinstall.yaml
      sed -i "s/PLACEHOLDER_IP/$IP/" /autoinstall.yaml
      sed -i "s/PLACEHOLDER_AMT_IP/$AMT_IP/" /autoinstall.yaml
      # We are using static interface names for now
      #sed -i "s/PLACEHOLDER_INTERFACE/$INTERFACE/" /autoinstall.yaml

      # Download SSH key with error handling
      if ! curl -f -s "http://$SERVER_IP/ansible_ssh_key.pub" > /tmp/ansible_ssh_key.pub; then
        echo "ERROR: Failed to download SSH key from server $SERVER_IP" >&2
        exit 1
      fi
  ssh:
    install-server: true
    authorized-keys:
      - "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIE1pS94ylBxptsLlfhOcVs6qwicSZhFFqee+3xkN98cv dev@desk1"
    allow-pw: false
  proxy: "http://10.0.0.1:3128"
  snaps:
    - name: microceph
  storage:
    config:
      - type: disk
        id: disk0
        match:
          size: largest
        ptable: gpt
        wipe: superblock
      - type: partition
        id: efi-partition
        device: disk0
        offset: 1048576
        size: 512M
        flag: boot
        grub_device: true
      - type: partition
        id: boot-partition
        device: disk0
        size: 4G
      - type: partition
        id: lvm-partition
        device: disk0
        size: -1
        flag: lvm
      - type: lvm_volgroup
        id: vg0
        name: vg0
        devices:
          - lvm-partition
      - type: lvm_partition
        id: root-lv
        name: root
        volgroup: vg0
        size: 100G
      - type: lvm_partition
        id: ceph-lv
        name: ceph
        volgroup: vg0
        size: -1
      - type: format
        id: efi-fs
        volume: efi-partition
        fstype: fat32
      - type: format
        id: boot-fs
        volume: boot-partition
        fstype: ext4
      - type: format
        id: root-fs
        volume: root-lv
        fstype: ext4
      - type: mount
        id: efi-mount
        device: efi-fs
        path: /boot/efi
      - type: mount
        id: boot-mount
        device: boot-fs
        path: /boot
      - type: mount
        id: root-mount
        device: root-fs
        path: /
  packages:
    - snapd
    - curl
  late-commands:
    # configure grub command line
    - sed -i 's/^GRUB_CMDLINE_LINUX=".*"/GRUB_CMDLINE_LINUX="text nomodeset i915.modeset=0 vga=0x031A"/' /target/etc/default/grub
    - curtin in-target --target=/target -- update-grub
    # configure proxy hostname resolution
    - |
      cat >> /target/etc/hosts << 'EOF'
      10.0.0.1 proxy.xc
      10.0.0.254 proxy.xc
      EOF
    # configure proxy environment variables
    - |
      cat >> /target/etc/environment << 'EOF'
      http_proxy=http://proxy.xc:3128
      https_proxy=http://proxy.xc:3128
      no_proxy=localhost,127.0.0.1,10.0.0.0/24,10.10.10.0/24
      EOF
    # configure apt proxy
    - |
      cat > /target/etc/apt/apt.conf.d/01proxy << 'EOF'
      Acquire::http::Proxy "http://proxy.xc:3128";
      Acquire::https::Proxy "http://proxy.xc:3128";
      EOF
    # add ansible key to root authorized_keys
    - |
      mkdir -p /target/root/.ssh
      echo "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIE1pS94ylBxptsLlfhOcVs6qwicSZhFFqee+3xkN98cv dev@desk1" | cat /tmp/ansible_ssh_key.pub - >> /target/root/.ssh/authorized_keys
      chmod 700 /target/root/.ssh
      chmod 600 /target/root/.ssh/authorized_keys
      chown -R root:root /target/root/.ssh
