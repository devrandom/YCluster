---
- name: Install etcd leader election for PostgreSQL and Qdrant
  hosts: storage
  become: yes
  vars:
    etcd_client_port: 2379
    
  tasks:
    - name: Install etcdctl if not present
      apt:
        name: etcd-client
        state: present
        update_cache: yes

    - name: Create etcd leader election script
      copy:
        dest: /usr/local/bin/etcd-leader-election.sh
        mode: '0755'
        content: |
          #!/bin/bash
          set -e

          ETCD_ENDPOINTS="$1"
          LEASE_TTL=30
          RENEW_INTERVAL=10

          if [ -z "$ETCD_ENDPOINTS" ]; then
              echo "Usage: $0 <etcd_endpoints>"
              echo "Example: $0 http://localhost:2379"
              exit 1
          fi

          LEADER_KEY="/cluster/leader"
          NODE_ID=$(hostname)
          LOCK_FILE="/var/run/etcd-leader.lock"
          LEASE_FILE="/var/run/etcd-lease.lease"

          # Function to cleanup on exit
          cleanup() {
              echo "Cleaning up cluster leader election"
              if [ -f "$LEASE_FILE" ]; then
                  LEASE_ID=$(cat "$LEASE_FILE")
                  timeout 5s etcdctl --endpoints="$ETCD_ENDPOINTS" lease revoke "$LEASE_ID" || true
                  rm -f "$LEASE_FILE"
              fi
              rm -f "$LOCK_FILE"
              
              # Stop all services if we were the leader
              stop_all_services
              exit 0
          }

          trap cleanup SIGTERM SIGINT EXIT

          # Function to attempt leadership
          attempt_leadership() {
              # Create a lease
              LEASE_ID=$(timeout 5s etcdctl --endpoints="$ETCD_ENDPOINTS" lease grant $LEASE_TTL | grep "lease" | awk '{print $2}')
              
              if [ -z "$LEASE_ID" ]; then
                  echo "Failed to create lease"
                  return 1
              fi
              
              # Try to acquire leadership atomically
              if timeout 5s etcdctl --endpoints="$ETCD_ENDPOINTS" put "$LEADER_KEY" "$NODE_ID" --lease="$LEASE_ID" --prev-kv | grep -q "key:"; then
                  # Key already exists, check if it's us
                  CURRENT_LEADER=$(timeout 5s etcdctl --endpoints="$ETCD_ENDPOINTS" get "$LEADER_KEY" --print-value-only)
                  if [ "$CURRENT_LEADER" = "$NODE_ID" ]; then
                      echo "Already the cluster leader"
                      echo "$LEASE_ID" > "$LEASE_FILE"
                      return 0
                  else
                      echo "Leadership held by $CURRENT_LEADER"
                      timeout 5s etcdctl --endpoints="$ETCD_ENDPOINTS" lease revoke "$LEASE_ID"
                      return 1
                  fi
              else
                  # Successfully acquired leadership
                  echo "Acquired cluster leadership"
                  echo "$LEASE_ID" > "$LEASE_FILE"
                  touch "$LOCK_FILE"
                  return 0
              fi
          }

          # Function to renew lease
          renew_lease() {
              if [ -f "$LEASE_FILE" ]; then
                  LEASE_ID=$(cat "$LEASE_FILE")
                  if timeout 5s etcdctl --endpoints="$ETCD_ENDPOINTS" lease keep-alive "$LEASE_ID" --once; then
                      return 0
                  else
                      echo "Failed to renew lease, lost leadership"
                      rm -f "$LEASE_FILE" "$LOCK_FILE"
                      return 1
                  fi
              fi
              return 1
          }

          # Function to start all services
          start_all_services() {
              echo "Starting all services as cluster leader"
              
              # Start PostgreSQL
              echo "Starting PostgreSQL..."
              systemctl start postgres-rbd || {
                  echo "Failed to start postgres-rbd service"
              }
              
              # Start Qdrant
              echo "Starting Qdrant..."
              systemctl start qdrant-rbd || {
                  echo "Failed to start qdrant-rbd service"
              }
          }

          # Function to stop all services
          stop_all_services() {
              echo "Stopping all services, no longer cluster leader"
              systemctl stop postgres-rbd || true
              systemctl stop qdrant-rbd || true
          }

          # Main loop
          IS_LEADER=false
          while true; do
              if [ "$IS_LEADER" = "false" ]; then
                  # Try to become leader
                  if attempt_leadership; then
                      IS_LEADER=true
                      start_all_services
                  else
                      # Not leader, ensure services are stopped
                      stop_all_services
                      sleep 5
                      continue
                  fi
              else
                  # We are leader, try to renew lease
                  if ! renew_lease; then
                      IS_LEADER=false
                      stop_all_services
                      continue
                  fi
              fi
              
              sleep $RENEW_INTERVAL
          done

    - name: Create cluster leader election systemd service
      copy:
        dest: /etc/systemd/system/cluster-leader-election.service
        content: |
          [Unit]
          Description=Cluster Leader Election via etcd
          After=network.target etcd.service
          Wants=etcd.service

          [Service]
          Type=simple
          ExecStart=/usr/local/bin/etcd-leader-election.sh http://localhost:2379
          Restart=always
          RestartSec=5
          User=root

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Enable cluster leader election service
      systemd:
        name: cluster-leader-election.service
        enabled: yes
