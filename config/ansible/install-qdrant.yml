---
- name: Install Qdrant on storage nodes
  hosts: storage
  become: yes
  tasks:
    - name: Install required packages
      apt:
        name:
          - curl
          - wget
        state: present

    - name: Check if Qdrant is already installed
      stat:
        path: /opt/qdrant/qdrant
      register: qdrant_installed

    - name: Download Qdrant tar.gz package
      shell: |
        wget -O /tmp/qdrant.tar.gz https://github.com/qdrant/qdrant/releases/download/v1.14.1/qdrant-x86_64-unknown-linux-gnu.tar.gz
        chmod 644 /tmp/qdrant.tar.gz
      when: not qdrant_installed.stat.exists

    - name: Create Qdrant installation directory
      file:
        path: /opt/qdrant
        state: directory
        mode: '0755'
      when: not qdrant_installed.stat.exists

    - name: Extract Qdrant tar.gz package
      unarchive:
        src: /tmp/qdrant.tar.gz
        dest: /opt/qdrant
        remote_src: yes
        owner: root
        group: root
        mode: '0755'
      when: not qdrant_installed.stat.exists

    - name: Create symlink for qdrant binary
      file:
        src: /opt/qdrant/qdrant
        dest: /usr/bin/qdrant
        state: link
      when: not qdrant_installed.stat.exists

    - name: Clean up downloaded tar.gz file
      file:
        path: /tmp/qdrant.tar.gz
        state: absent
      when: not qdrant_installed.stat.exists

    - name: Create qdrant user
      user:
        name: qdrant
        uid: 1001
        system: yes
        shell: /bin/false
        home: /var/lib/qdrant
        create_home: yes

    - name: Create /rbd/qdrant directory
      file:
        path: /rbd/qdrant
        state: directory
        owner: qdrant
        group: qdrant
        mode: '0755'

    - name: Create Qdrant configuration directory
      file:
        path: /etc/qdrant
        state: directory
        owner: qdrant
        group: qdrant
        mode: '0755'

    - name: Create Qdrant configuration file
      copy:
        dest: /etc/qdrant/config.yaml
        owner: qdrant
        group: qdrant
        mode: '0644'
        content: |
          storage:
            storage_path: /rbd/qdrant/storage
            snapshots_path: /rbd/qdrant/snapshots
          service:
            host: 0.0.0.0
            http_port: 6333
            grpc_port: 6334
            static_content_dir: /opt/qdrant/static
          log_level: INFO

    - name: Create Qdrant RBD manager script
      copy:
        dest: /usr/local/bin/qdrant-rbd-manager.sh
        mode: '0755'
        content: |
          #!/bin/bash
          set -e

          POOL_NAME="pool1"
          RBD_IMAGE="qdrant-rbd1"
          MOUNT_POINT="/rbd/qdrant"
          QDRANT_DATA_DIR="/rbd/qdrant"
          LOCK_FILE="/var/run/qdrant-rbd.lock"
          MAX_RETRIES=3
          RETRY_DELAY=10

          # Function to acquire RBD lock and mount
          acquire_and_mount() {
              local retries=0
              
              while [ $retries -lt $MAX_RETRIES ]; do
                  # Try to map the RBD device with exclusive lock
                  if RBD_DEVICE=$(rbd map "${POOL_NAME}/${RBD_IMAGE}" --exclusive 2>/dev/null); then
                      echo "Successfully locked RBD device: $RBD_DEVICE"
                      
                      # Create mount point if it doesn't exist
                      mkdir -p "$MOUNT_POINT"
                      
                      # Mount the device
                      if mount "$RBD_DEVICE" "$MOUNT_POINT" 2>/dev/null; then
                          echo "Successfully mounted $RBD_DEVICE to $MOUNT_POINT"
                          
                          # Create qdrant data directory with proper ownership
                          mkdir -p "$QDRANT_DATA_DIR/storage"
                          mkdir -p "$QDRANT_DATA_DIR/snapshots"
                          chown -R qdrant:qdrant "$QDRANT_DATA_DIR"
                          
                          # Store device info for cleanup
                          echo "$RBD_DEVICE" > "$LOCK_FILE"
                          
                          # Start Qdrant
                          systemctl start qdrant
                          return 0
                      else
                          echo "Failed to mount $RBD_DEVICE to $MOUNT_POINT"
                          rbd unmap "$RBD_DEVICE" 2>/dev/null || true
                      fi
                  else
                      echo "Failed to acquire exclusive lock on RBD ${POOL_NAME}/${RBD_IMAGE} (attempt $((retries + 1))/$MAX_RETRIES)"
                  fi
                  
                  retries=$((retries + 1))
                  if [ $retries -lt $MAX_RETRIES ]; then
                      echo "Retrying in $RETRY_DELAY seconds..."
                      sleep $RETRY_DELAY
                  fi
              done
              
              echo "Failed to acquire RBD lock after $MAX_RETRIES attempts"
              return 1
          }

          # Function to unmount and release RBD
          release_and_unmount() {
              # Stop Qdrant first
              echo "Stopping Qdrant service"
              systemctl stop qdrant || true
              
              if [ -f "$LOCK_FILE" ]; then
                  RBD_DEVICE=$(cat "$LOCK_FILE")
                  
                  echo "Unmounting and releasing RBD device: $RBD_DEVICE"
                  
                  # Unmount
                  umount "$MOUNT_POINT" 2>/dev/null || true
                  
                  # Unmap RBD device
                  rbd unmap "$RBD_DEVICE" 2>/dev/null || true
                  
                  # Remove lock file
                  rm -f "$LOCK_FILE"
                  
                  echo "Released RBD device: $RBD_DEVICE"
              else
                  echo "No RBD lock file found, ensuring Qdrant is stopped"
              fi
          }

          case "$1" in
              start)
                  if acquire_and_mount; then
                      echo "Qdrant RBD successfully acquired and mounted"
                      exit 0
                  else
                      echo "Failed to acquire Qdrant RBD lock"
                      exit 1
                  fi
                  ;;
              stop)
                  release_and_unmount
                  ;;
              *)
                  echo "Usage: $0 {start|stop}"
                  exit 1
                  ;;
          esac

    - name: Create qdrant-rbd systemd service
      copy:
        dest: /etc/systemd/system/qdrant-rbd.service
        content: |
          [Unit]
          Description=Qdrant with RBD Storage
          After=network.target

          [Service]
          Type=oneshot
          RemainAfterExit=yes
          ExecStart=/usr/local/bin/qdrant-rbd-manager.sh start
          ExecStop=/usr/local/bin/qdrant-rbd-manager.sh stop
          TimeoutStartSec=300
          TimeoutStopSec=60
          User=root

          [Install]
          WantedBy=multi-user.target

    - name: Create Qdrant systemd service
      copy:
        dest: /etc/systemd/system/qdrant.service
        content: |
          [Unit]
          Description=Qdrant Vector Database
          After=network.target

          [Service]
          Type=simple
          User=qdrant
          Group=qdrant
          ExecStart=/usr/bin/qdrant --config-path /etc/qdrant/config.yaml
          Restart=no
          LimitNOFILE=65536

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Disable qdrant-rbd service (managed by leader election)
      systemd:
        name: qdrant-rbd.service
        enabled: no

    - name: Disable Qdrant service (managed by leader election)
      systemd:
        name: qdrant
        enabled: no
        state: stopped

