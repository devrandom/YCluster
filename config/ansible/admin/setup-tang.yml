---
- name: Setup Tang server for network-bound disk encryption
  hosts: storage
  become: yes
  vars:
    tang_keys_dir: "/secrets/tang"
    tang_cache_dir: "/var/cache/tang"
    tang_systemd_dir: "/etc/systemd/system"
  
  tasks:
    - name: Install Tang server
      apt:
        name: tang
        state: present

    - name: Disable Tang socket completely
      systemd:
        name: tangd.socket
        enabled: no
        state: stopped

    - name: Create custom Tang service
      copy:
        dest: "{{ tang_systemd_dir }}/tang-server.service"
        content: |
          [Unit]
          Description=Tang Server (Custom)
          After=network-online.target
          Wants=network-online.target
          
          [Service]
          Type=simple
          User=_tang
          Group=_tang
          ExecStartPre=+/usr/local/bin/secrets-volume-manager start
          ExecStart=/usr/libexec/tangd -l -p 8777 {{ tang_keys_dir }}
          Restart=always
          StandardOutput=journal
          StandardError=journal
          
          [Install]
          WantedBy=multi-user.target
        mode: '0644'

    - name: Ensure /secrets is mounted
      command: mountpoint /secrets
      register: secrets_mounted
      failed_when: secrets_mounted.rc != 0
      changed_when: false

    - name: Create Tang keys directory on encrypted volume
      file:
        path: "{{ tang_keys_dir }}"
        state: directory
        mode: '0700'
        owner: _tang
        group: _tang

    - name: Check if Tang keys exist
      find:
        paths: "{{ tang_keys_dir }}"
        patterns: "*.jwk"
      register: existing_keys

    - name: Generate Tang keys if none exist
      command: /usr/libexec/tangd-keygen {{ tang_keys_dir }}
      become_user: _tang
      when: existing_keys.matched == 0

    - name: Create Tang cache directory
      file:
        path: "{{ tang_cache_dir }}"
        state: directory
        mode: '0755'
        owner: _tang
        group: _tang

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Enable and start custom Tang service
      systemd:
        name: tang-server.service
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Check Tang service status
      command: systemctl is-active tang-server.service
      register: tang_status
      changed_when: false

    - name: Display Tang server information
      debug:
        msg: |
          Tang server is {{ tang_status.stdout }}
          Keys directory: {{ tang_keys_dir }}
          Service: tang-server.service
          To get the Tang server advertisement:
          curl http://{{ ansible_host }}:{{ tang_port }}/adv

    - name: Show Tang keys for client configuration
      command: tang-show-keys {{ tang_port }}
      register: tang_keys_output
      changed_when: false
      failed_when: false

    - name: Display Tang keys
      debug:
        msg: |
          Tang server keys:
          {{ tang_keys_output.stdout if tang_keys_output.rc == 0 else 'Keys generated but tang-show-keys failed. Use: curl http://' + ansible_host + ':' + tang_port|string + '/adv' }}
