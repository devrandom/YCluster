---
- name: Setup web services on storage and compute nodes
  hosts: storage:compute
  become: yes
  vars:
    admin_services_dir: /opt/admin-services
    
  tasks:
    - name: Install net-tools package for arp command
      apt:
        name: net-tools
        state: present

    - name: Copy etcd-based allocation API
      copy:
        src: "files/app.py"
        dest: "{{ admin_services_dir }}/app.py"
        mode: '0644'
      notify: restart admin-api

    # Admin API now uses the YCluster package directly
    # No need to link common utilities

    - name: Create Flask templates directory
      file:
        path: "{{ admin_services_dir }}/templates"
        state: directory
        mode: '0755'

    - name: Copy user-data template
      copy:
        src: "templates/user-data.j2"
        dest: "{{ admin_services_dir }}/templates/user-data.j2"
        mode: '0644'
      notify: restart admin-api

    - name: Copy status page template
      copy:
        src: "templates/status.html"
        dest: "{{ admin_services_dir }}/templates/status.html"
        mode: '0644'
      notify: restart admin-api

    - name: Create static files directory
      file:
        path: "{{ admin_services_dir }}/static"
        state: directory
        mode: '0755'

    - name: Copy Alpine.js static file
      copy:
        src: "static/alpine-3.14.1.min.js"
        dest: "{{ admin_services_dir }}/static/alpine-3.14.1.min.js"
        mode: '0644'
      notify: restart admin-api

    - name: Create systemd service for admin API
      copy:
        dest: /etc/systemd/system/admin-api.service
        content: |
          [Unit]
          Description=Admin API Service
          After=network.target etcd.service
          Wants=etcd.service

          [Service]
          Type=simple
          Environment="ETCD_HOSTS={% for h in groups['core'] %}{{ hostvars[h]['ansible_host'] }}:2379{% if not loop.last %},{% endif %}{% endfor %}"
          ExecStart=/usr/bin/python3 {{ admin_services_dir }}/app.py
          StandardOutput=journal
          StandardError=journal
          Restart=always
          RestartSec=5
          User=root

          [Install]
          WantedBy=multi-user.target
      notify: restart admin-api

    - name: Create SSL directory for nginx
      file:
        path: /etc/nginx/ssl
        state: directory
        mode: '0700'
        owner: root
        group: root

    - name: Create TLS certificate fetch wrapper script
      copy:
        dest: /usr/local/lib/cluster/fetch-tls-certs
        mode: '0755'
        owner: root
        group: root
        content: |
          #!/bin/bash
          exec ycluster tls fetch-certs "$@"

    - name: Create nginx template directory
      file:
        path: /etc/nginx/templates
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Configure nginx with HTTPS support (template only)
      copy:
        src: admin-api.conf.j2
        dest: /etc/nginx/templates/admin-api.conf.j2

    - name: Configure nginx shared locations (template only)
      copy:
        src: admin-api-locations.conf.j2
        dest: /etc/nginx/admin-api-locations.conf

    - name: Update nginx configuration with certbot-manager
      command: "/usr/local/bin/certbot-manager update-nginx{% if 'storage' not in group_names %} --local{% endif %}"
      register: nginx_update_result
      changed_when: "'Nginx configuration updated' in nginx_update_result.stdout and 'already up to date' not in nginx_update_result.stdout"
      failed_when: nginx_update_result.rc != 0
      notify: restart nginx

    - name: Enable nginx site
      file:
        src: /etc/nginx/sites-available/admin-api
        dest: /etc/nginx/sites-enabled/admin-api
        state: link
      notify: restart nginx

    - name: Remove default nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: restart nginx

    - name: Flush handlers to restart nginx immediately
      meta: flush_handlers

    - name: Create autoinstall directory
      file:
        path: /var/www/html/autoinstall
        state: directory
        mode: '0755'

    - name: Copy all assets to web directory
      copy:
        src: "assets/"
        dest: /var/www/html/assets/
        mode: preserve

    - name: Copy index.html for web interface
      copy:
        src: "index.html"
        dest: /var/www/html/index.html
        mode: '0644'

    - name: Copy ansible SSH public key
      copy:
        src: /opt/bootstrap-files/ansible_ssh_key.pub
        dest: /var/www/html/ansible_ssh_key.pub
        mode: '0644'

    - name: Enable and start common web services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
        daemon_reload: yes
      loop:
        - admin-api
        - nginx

    - name: Enable and start TLS fetch timer (storage only)
      systemd:
        name: fetch-tls-certs.timer
        enabled: yes
        state: started
        daemon_reload: yes
      when: "'storage' in group_names"

  handlers:
    - name: restart admin-api
      systemd:
        name: admin-api
        state: restarted

    - name: restart nginx
      systemd:
        name: nginx
        state: restarted

- name: Storage web services
  hosts: storage
  become: yes
  tasks:
    - name: Fetch initial TLS certificates
      command: /usr/local/lib/cluster/fetch-tls-certs
      register: fetch_result
      failed_when: fetch_result.rc != 0
      changed_when: "'Certificates updated' in fetch_result.stdout"

    - name: Create systemd timer for certificate refresh
      copy:
        dest: /etc/systemd/system/fetch-tls-certs.timer
        content: |
          [Unit]
          Description=Fetch TLS certificates from etcd
          Requires=fetch-tls-certs.service
          
          [Timer]
          OnCalendar=hourly
          Persistent=true
          
          [Install]
          WantedBy=timers.target

    - name: Create systemd service for certificate refresh
      copy:
        dest: /etc/systemd/system/fetch-tls-certs.service
        content: |
          [Unit]
          Description=Fetch TLS certificates from etcd
          After=network.target
          
          [Service]
          Type=oneshot
          ExecStart=/usr/local/lib/cluster/fetch-tls-certs
          ExecStartPost=/bin/systemctl reload nginx
