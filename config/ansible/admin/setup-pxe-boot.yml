---
- name: Setup PXE boot infrastructure on storage nodes s1-s3
  hosts: core
  become: yes
    
  tasks:
    - name: Create TFTP directory structure
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /var/lib/tftpboot
        - /var/lib/tftpboot/EFI
        - /var/lib/tftpboot/EFI/BOOT
        - /var/lib/tftpboot/grub
        - /var/lib/tftpboot/ubuntu

    - name: Check if Ubuntu ISO already exists
      stat:
        path: /var/lib/tftpboot/ubuntu/ubuntu-24.04.2-live-server-amd64.iso
      register: iso_file

    - name: Check if Ubuntu ISO exists on ansible host
      stat:
        path: /var/lib/tftpboot/ubuntu/ubuntu-24.04.2-live-server-amd64.iso
      register: ansible_host_iso
      delegate_to: localhost
      when: not iso_file.stat.exists

    - name: Copy Ubuntu ISO from ansible host
      copy:
        src: /var/lib/tftpboot/ubuntu/ubuntu-24.04.2-live-server-amd64.iso
        dest: /var/lib/tftpboot/ubuntu/ubuntu-24.04.2-live-server-amd64.iso
        mode: '0644'
      when: not iso_file.stat.exists and ansible_host_iso.stat.exists
      register: iso_copy_result

    - name: Download Ubuntu ISO for netboot files (fallback)
      get_url:
        url: http://10.0.0.1/ubuntu-24.04.2-live-server-amd64.iso
        dest: /var/lib/tftpboot/ubuntu/ubuntu-24.04.2-live-server-amd64.iso
        mode: '0644'
      when: not iso_file.stat.exists and (not ansible_host_iso.stat.exists or iso_copy_result is failed)

    - name: Check if netboot files exist
      stat:
        path: "{{ item }}"
      register: netboot_files
      loop:
        - /var/lib/tftpboot/ubuntu/vmlinuz
        - /var/lib/tftpboot/ubuntu/initrd

    - name: Extract netboot files from ISO
      shell: |
        isoinfo -R -x /casper/vmlinuz -i /var/lib/tftpboot/ubuntu/ubuntu-24.04.2-live-server-amd64.iso > /var/lib/tftpboot/ubuntu/vmlinuz
        isoinfo -R -x /casper/initrd -i /var/lib/tftpboot/ubuntu/ubuntu-24.04.2-live-server-amd64.iso > /var/lib/tftpboot/ubuntu/initrd
      when: netboot_files.results | selectattr('stat.exists', 'equalto', false) | list | length > 0

    - name: Check if EFI files already exist
      stat:
        path: "{{ item }}"
      register: efi_files
      loop:
        - /var/lib/tftpboot/EFI/BOOT/bootx64.efi
        - /var/lib/tftpboot/EFI/BOOT/grubx64.efi

    - name: Download and extract EFI boot files
      shell: |
        cd /tmp
        apt-get download shim-signed grub-efi-amd64-signed
        dpkg-deb --fsys-tarfile shim-signed*deb | tar x ./usr/lib/shim/shimx64.efi.signed.latest -O > /var/lib/tftpboot/EFI/BOOT/bootx64.efi
        dpkg-deb --fsys-tarfile grub-efi-amd64-signed*deb | tar x ./usr/lib/grub/x86_64-efi-signed/grubnetx64.efi.signed -O > /var/lib/tftpboot/EFI/BOOT/grubx64.efi
        rm -f shim-signed*.deb grub-efi-amd64-signed*.deb
      when: efi_files.results | selectattr('stat.exists', 'equalto', false) | list | length > 0

    - name: Create grub configuration for PXE boot
      copy:
        dest: /var/lib/tftpboot/grub/grub.cfg
        content: |
          set timeout=30
          set default=0

          menuentry "Boot from First Hard Disk (EFI)" {
              # set root=(hd0,1)
              search --set=root --file /efi/ubuntu/grub.cfg
              configfile /efi/ubuntu/grub.cfg
          }

          menuentry "Ubuntu 24.04 Server Autoinstall" {
              linux /ubuntu/vmlinuz text video=HDMI-A-1:1024x768@60e ip=dhcp url=http://{{ ansible_host }}/ubuntu/ubuntu-24.04.2-live-server-amd64.iso autoinstall ds='nocloud-net;s=http://{{ ansible_host }}/autoinstall/' cloud-config-url=/dev/null
              initrd /ubuntu/initrd
          }
          
          menuentry "Ubuntu 24.04 Server Manual Install" {
              linux /ubuntu/vmlinuz text video=HDMI-A-1:1024x768@60e ip=dhcp url=http://{{ ansible_host }}/ubuntu/ubuntu-24.04.2-live-server-amd64.iso
              initrd /ubuntu/initrd
          }
