#!/bin/bash
set -e

VOLUME_GROUP="vg0"
LOGICAL_VOLUME="secrets"
MOUNT_POINT="/secrets"
LOCK_FILE="/var/run/secrets-volume.lock"
LUKS_MAPPER_NAME="secrets"
LUKS_MAPPER_PATH="/dev/mapper/${LUKS_MAPPER_NAME}"
LV_DEVICE_PATH="/dev/${VOLUME_GROUP}/${LOGICAL_VOLUME}"

# Helper function to ensure lockfile exists
ensure_lockfile() {
    if [ ! -f "$LOCK_FILE" ]; then
        if [ -e "$LV_DEVICE_PATH" ]; then
            echo "$LV_DEVICE_PATH" > "$LOCK_FILE"
        fi
    fi
}

# Helper function to mount filesystem
mount_filesystem() {
    local device="$1"
    mkdir -p "$MOUNT_POINT"
    if mount -t ext4 -o defaults,noatime "$device" "$MOUNT_POINT"; then
        echo "Successfully mounted $device to $MOUNT_POINT"
        return 0
    else
        echo "Failed to mount $device to $MOUNT_POINT"
        return 1
    fi
}

# Helper function to get other Tang servers (excluding current node)
get_other_tang_servers() {
    local current_hostname=$(hostname)
    local all_servers="s1:8777 s2:8777 s3:8777"
    local other_servers=""
    
    for server in $all_servers; do
        local server_hostname=$(echo "$server" | cut -d: -f1)
        if [ "$server_hostname" != "$current_hostname" ]; then
            if [ -z "$other_servers" ]; then
                other_servers="$server"
            else
                other_servers="$other_servers $server"
            fi
        fi
    done
    
    echo "$other_servers"
}

# Helper function to generate Clevis policy JSON
generate_clevis_policy() {
    local tang_servers=$(get_other_tang_servers)
    local tang_array=""
    
    for server in $tang_servers; do
        if [ -z "$tang_array" ]; then
            tang_array="{\"url\":\"http://$server\"}"
        else
            tang_array="$tang_array,{\"url\":\"http://$server\"}"
        fi
    done
    
    echo "{\"t\":2,\"pins\":{\"tang\":[$tang_array]}}"
}

# Helper function to check and bind Clevis policy
ensure_clevis_binding() {
    local device="$1"
    local passphrase_file="$2"
    
    # Verify that the passphrase can open slot 0
    if ! cryptsetup luksOpen --test-passphrase --key-slot 0 -d "$passphrase_file" "$device"; then
        echo "ERROR: Passphrase cannot open LUKS slot 0"
        return 1
    fi
    
    # Check existing bindings
    local existing_bindings=$(clevis luks list -d "$device" 2>/dev/null || echo "")
    local expected_policy=$(generate_clevis_policy)
    
    if [ -n "$existing_bindings" ]; then
        # Check if any existing binding matches our expected policy
        local policy_matches=false
        while IFS= read -r line; do
            if [[ "$line" =~ ^([0-9]+):\ sss\ \'(.*)\'$ ]]; then
                local slot="${BASH_REMATCH[1]}"
                local existing_policy="${BASH_REMATCH[2]}"
                if [ "$existing_policy" = "$expected_policy" ]; then
                    echo "Clevis binding already correct in slot $slot"
                    policy_matches=true
                elif [ "$slot" = "0" ]; then
                    echo "FATAL ERROR: Slot 0 should not have Clevis binding: $existing_policy"
                    return 2
                else
                    echo "Removing incorrect binding in slot $slot: $existing_policy"
                    if ! clevis luks unbind -d "$device" -s "$slot" -f; then
                        echo "ERROR: Failed to unbind slot $slot"
                        return 2
                    fi
                fi
            fi
        done <<< "$existing_bindings"
        
        if [ "$policy_matches" = "true" ]; then
            return 0  # No change needed
        fi
        
        echo "Clevis binding needs update"
        echo "Expected: $expected_policy"
    else
        echo "No existing Clevis bindings found"
    fi
    
    # Bind to Clevis policy
    echo "Binding LUKS device to Clevis policy..."
    if clevis luks bind -d "$device" -k "$passphrase_file" -y sss "$expected_policy"; then
        echo "Successfully bound LUKS device to Clevis"
        return 1  # Change made
    else
        echo "Failed to bind LUKS device to Clevis"
        return 2  # Error
    fi
}

# Helper function to decrypt LUKS device (shared logic)
decrypt_luks_device() {
    local lv_device="$1"
    local use_passphrase="$2"
    local test_mode="$3"
    local mapper_name="$4"
    
    if [ "$use_passphrase" = "true" ]; then
        if [ "$test_mode" = "true" ]; then
            cryptsetup luksOpen --test-passphrase "$lv_device"
        else
            cryptsetup luksOpen "$lv_device" "$mapper_name"
        fi
    else
        if [ "$test_mode" = "true" ]; then
            clevis luks unlock -d "$lv_device" -o "--test-passphrase"
        else
            clevis luks unlock -d "$lv_device" -n "$mapper_name"
        fi
    fi
}

# Helper function to decrypt and mount LUKS device
decrypt_and_mount() {
    local lv_device="$1"
    local use_passphrase="$2"
    
    if decrypt_luks_device "$lv_device" "$use_passphrase" "false" "$LUKS_MAPPER_NAME"; then
        if mount_filesystem "$LUKS_MAPPER_PATH"; then
            echo "$lv_device" > "$LOCK_FILE"
            
            # Set proper ownership and permissions
            chown root:root "$MOUNT_POINT"
            chmod 701 "$MOUNT_POINT"
            
            return 0
        else
            cryptsetup luksClose "$LUKS_MAPPER_NAME" || true
            return 1
        fi
    else
        return 1
    fi
}

# Function to open and mount secrets volume
open_and_mount() {
    local use_passphrase="$1"
    
    # Check if already mounted
    if mountpoint -q "$MOUNT_POINT"; then
        echo "Already mounted at $MOUNT_POINT"
        ensure_lockfile
        return 0
    fi
    
    # Check if LUKS device is already open
    if [ -e "$LUKS_MAPPER_PATH" ]; then
        echo "LUKS device already open at $LUKS_MAPPER_PATH"
        
        if mount_filesystem "$LUKS_MAPPER_PATH"; then
            ensure_lockfile
            return 0
        else
            return 1
        fi
    fi
    
    # Check if logical volume exists
    if [ ! -e "$LV_DEVICE_PATH" ]; then
        echo "ERROR: Logical volume $LV_DEVICE_PATH does not exist"
        return 1
    fi
    
    echo "Opening secrets volume: $LV_DEVICE_PATH"

    # For Clevis, retry up to 3 times with 10 second spacing
    local attempt=1
    local max_attempts=3
    
    while [ $attempt -le $max_attempts ]; do
        echo "Attempt $attempt of $max_attempts..."
        
        if decrypt_and_mount "$LV_DEVICE_PATH" "$use_passphrase"; then
            return 0
        fi

        # If not actually using clevis, try only once
        if [ "$use_passphrase" = "true" ]; then
          return 1
        fi

        if [ $attempt -lt $max_attempts ]; then
            echo "Failed attempt $attempt, waiting 10 seconds before retry..."
            sleep 10
        else
            echo "All $max_attempts attempts failed"
        fi
        
        attempt=$((attempt + 1))
    done
    
    return 1
}

# Function to unmount and close secrets volume
close_and_unmount() {
    if [ -f "$LOCK_FILE" ]; then
        LV_DEVICE=$(cat "$LOCK_FILE")
        
        echo "Unmounting and closing secrets volume: $LV_DEVICE"
        
        # Unmount
        umount "$MOUNT_POINT" || true
        
        # Close LUKS device
        cryptsetup luksClose "$LUKS_MAPPER_NAME" || true
        
        # Remove lock file
        rm -f "$LOCK_FILE"
        
        echo "Closed secrets volume: $LV_DEVICE"
    else
        echo "No secrets volume lock file found"
        
        # Try to clean up anyway
        umount "$MOUNT_POINT" 2>/dev/null || true
        cryptsetup luksClose "$LUKS_MAPPER_NAME" 2>/dev/null || true
    fi
}

# Function to test if volume can be decrypted without disturbing current state
test_decrypt() {
    local use_passphrase="$1"
    echo "=== Testing Secrets Volume Decrypt Capability ==="
    
    # Check if logical volume exists
    if [ ! -e "$LV_DEVICE_PATH" ]; then
        echo "ERROR: Logical volume $LV_DEVICE_PATH does not exist"
        return 1
    fi
    
    echo "Logical volume exists: $LV_DEVICE_PATH"
    
    # Check if device is LUKS formatted
    if ! cryptsetup isLuks "$LV_DEVICE_PATH"; then
        echo "ERROR: Device $LV_DEVICE_PATH is not LUKS formatted"
        return 1
    fi
    
    echo "Device is LUKS formatted"
    
    # Test decrypt capability
    local decrypt_success=false
    
    echo "Testing decrypt capability..."
    if decrypt_luks_device "$LV_DEVICE_PATH" "$use_passphrase" "true"; then
        echo "SUCCESS: Volume can be decrypted"
        decrypt_success=true
    else
        echo "ERROR: Failed to decrypt volume"
    fi
    
    if [ "$decrypt_success" = "true" ]; then
        echo "Test completed successfully - volume is decryptable"
        return 0
    else
        echo "Test failed - volume cannot be decrypted"
        return 1
    fi
}

# Function to show status
show_status() {
    echo "=== Secrets Volume Status ==="
    
    # Check mount status
    if mountpoint -q "$MOUNT_POINT"; then
        echo "Mount: MOUNTED at $MOUNT_POINT"
        df -h "$MOUNT_POINT" | tail -1 | awk '{print "  Usage: " $3 "/" $2 " (" $5 " used)"}'
    else
        echo "Mount: NOT MOUNTED"
    fi
    
    # Check LUKS status
    if [ -e "$LUKS_MAPPER_PATH" ]; then
        echo "LUKS: OPEN at $LUKS_MAPPER_PATH"
    else
        echo "LUKS: CLOSED"
    fi
    
    # Check logical volume status
    if [ -e "$LV_DEVICE_PATH" ]; then
        echo "LV: EXISTS at $LV_DEVICE_PATH"
        
        # Show LV information
        local lv_info=$(lvs --noheadings --units b -o lv_size,lv_attr "$LV_DEVICE_PATH" 2>/dev/null || echo "unknown unknown")
        local size=$(echo "$lv_info" | awk '{print $1}')
        local attr=$(echo "$lv_info" | awk '{print $2}')
        echo "  Size: $size"
        echo "  Attributes: $attr"
    else
        echo "LV: NOT FOUND"
    fi
    
    # Check lock file
    if [ -f "$LOCK_FILE" ]; then
        local lock_device=$(cat "$LOCK_FILE")
        echo "Lock file: EXISTS ($lock_device)"
    else
        echo "Lock file: NOT FOUND"
    fi
    
    # Check volume group status
    local vg_info=$(vgs --noheadings --units b -o vg_size,vg_free "$VOLUME_GROUP" 2>/dev/null || echo "unknown unknown")
    if [ "$vg_info" != "unknown unknown" ]; then
        local vg_size=$(echo "$vg_info" | awk '{print $1}')
        local vg_free=$(echo "$vg_info" | awk '{print $2}')
        echo "VG: EXISTS ($VOLUME_GROUP)"
        echo "  Size: $vg_size"
        echo "  Free: $vg_free"
    else
        echo "VG: NOT FOUND ($VOLUME_GROUP)"
    fi
}

# Parse command line arguments
USE_PASSPHRASE=false
COMMAND=""
PASSPHRASE_FILE=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -K)
            USE_PASSPHRASE=true
            shift
            ;;
        start|stop|status|check|bind)
            COMMAND="$1"
            shift
            ;;
        -k)
            PASSPHRASE_FILE="$2"
            shift 2
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

if [ -z "$COMMAND" ]; then
    echo "Usage: $0 [-K] [-k FILE] {start|stop|status|check|bind}"
    echo "  start       - Open and mount secrets volume"
    echo "  stop        - Unmount and close secrets volume"
    echo "  status      - Show current volume status"
    echo "  check       - Test if volume can be decrypted (OK to run on mounted volume)"
    echo "  bind        - Ensure Clevis binding is correct (requires -k)"
    echo ""
    echo "Options:"
    echo "  -K          - Use LUKS passphrase instead of Clevis (for start and check commands)"
    echo "  -k FILE     - Passphrase file for bind command"
    exit 1
fi

case "$COMMAND" in
    start)
        if open_and_mount "$USE_PASSPHRASE"; then
            echo "Secrets volume successfully opened and mounted"
            exit 0
        else
            echo "Failed to open secrets volume"
            exit 1
        fi
        ;;
    stop)
        close_and_unmount
        ;;
    status)
        show_status
        ;;
    check)
        if test_decrypt "$USE_PASSPHRASE"; then
            exit 0
        else
            exit 1
        fi
        ;;
    bind)
        # Check if logical volume exists
        if [ ! -e "$LV_DEVICE_PATH" ]; then
            echo "ERROR: Logical volume $LV_DEVICE_PATH does not exist"
            exit 2
        fi
        
        # Check if passphrase file is provided
        if [ -z "$PASSPHRASE_FILE" ]; then
            echo "ERROR: -k is required for bind command"
            exit 2
        fi
        
        if [ ! -f "$PASSPHRASE_FILE" ]; then
            echo "ERROR: Passphrase file $PASSPHRASE_FILE does not exist"
            exit 2
        fi
        
        # Ensure Clevis binding
        if ensure_clevis_binding "$LV_DEVICE_PATH" "$PASSPHRASE_FILE"; then
            echo "Clevis binding completed successfully"
            exit 0
        else
            echo "Clevis binding failed"
            exit 2
        fi
        ;;
esac
