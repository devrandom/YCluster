---
- name: Install Prometheus monitoring stack
  hosts: core
  become: yes
  vars:
    prometheus_retention_time: "48h"
    prometheus_retention_size: "10GB"
    
  tasks:
    - name: Create Grafana data directory
      file:
        path: /var/lib/grafana-docker
        state: directory
        owner: "472"
        group: "472"
        mode: '0755'

    - name: Install Prometheus stack
      apt:
        name:
          - prometheus
          - prometheus-node-exporter
          - prometheus-alertmanager
          - prometheus-blackbox-exporter
        state: present

    - name: Configure node exporter with textfile collector
      copy:
        dest: /etc/default/prometheus-node-exporter
        content: |
          # Arguments for prometheus-node-exporter
          ARGS="--collector.textfile.directory=/var/lib/prometheus/node-exporter"
        mode: '0644'
      notify: restart node exporter

    - name: Create textfile directory for node exporter
      file:
        path: /var/lib/prometheus/node-exporter
        state: directory
        owner: prometheus
        group: prometheus
        mode: '0755'

    - name: Create Prometheus configuration directory
      file:
        path: /etc/prometheus/rules
        state: directory
        owner: prometheus
        group: prometheus
        mode: '0755'

    - name: Configure Prometheus for local storage
      template:
        src: prometheus-local.yml.j2
        dest: /etc/prometheus/prometheus.yml
        owner: prometheus
        group: prometheus
        mode: '0644'
      notify: restart prometheus

    - name: Configure Prometheus alert rules
      template:
        src: ycluster-alerts.yml.j2
        dest: /etc/prometheus/rules/ycluster-alerts.yml
        owner: prometheus
        group: prometheus
        mode: '0644'
        variable_start_string: '[%'
        variable_end_string: '%]'
      notify: restart prometheus

    - name: Configure Alertmanager
      template:
        src: alertmanager.yml.j2
        dest: /etc/prometheus/alertmanager.yml
        owner: prometheus
        group: prometheus
        mode: '0644'
      notify: restart alertmanager

    - name: Create Alertmanager systemd override directory
      file:
        path: /etc/systemd/system/prometheus-alertmanager.service.d
        state: directory
        mode: '0755'

    - name: Configure Alertmanager clustering
      template:
        src: alertmanager-override.conf.j2
        dest: /etc/systemd/system/prometheus-alertmanager.service.d/override.conf
        mode: '0644'
      notify:
        - reload systemd
        - restart alertmanager

    - name: Create systemd override directory
      file:
        path: /etc/systemd/system/prometheus.service.d
        state: directory
        mode: '0755'

    - name: Configure Prometheus systemd override for local storage
      copy:
        dest: /etc/systemd/system/prometheus.service.d/override.conf
        content: |
          [Service]
          ExecStart=
          ExecStart=/usr/bin/prometheus \
            --config.file=/etc/prometheus/prometheus.yml \
            --storage.tsdb.path=/var/lib/prometheus/metrics2/ \
            --storage.tsdb.retention.time={{ prometheus_retention_time }} \
            --storage.tsdb.retention.size={{ prometheus_retention_size }} \
            --web.console.templates=/etc/prometheus/consoles \
            --web.console.libraries=/etc/prometheus/console_libraries \
            --web.enable-lifecycle \
            --web.external-url=http://{{ ansible_host }}:9090/
        mode: '0644'
      notify:
        - reload systemd
        - restart prometheus

    - name: Install Python dependencies for ntfy webhook
      apt:
        name:
          - python3-flask
          - python3-requests
        state: present

    - name: Copy ntfy webhook handler
      copy:
        src: ntfy-webhook.py
        dest: /usr/local/bin/ntfy-webhook.py
        owner: root
        group: root
        mode: '0755'

    - name: Create cluster scripts directory
      file:
        path: /usr/local/lib/cluster
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Copy blackbox targets updater
      copy:
        src: update-blackbox-targets.py
        dest: /usr/local/lib/cluster/update-blackbox-targets
        owner: root
        group: root
        mode: '0755'

    - name: Create initial blackbox targets file
      copy:
        dest: /etc/prometheus/blackbox-targets.json
        content: '[]'
        owner: prometheus
        group: prometheus
        mode: '0644'
        force: no

    - name: Create ntfy-webhook user
      user:
        name: ntfy-webhook
        system: yes
        shell: /usr/sbin/nologin
        home: /var/lib/ntfy-webhook
        create_home: no

    - name: Create ntfy webhook systemd service
      copy:
        dest: /etc/systemd/system/ntfy-webhook.service
        content: |
          [Unit]
          Description=Ntfy Webhook Handler for Alertmanager
          After=network.target
          Wants=network.target

          [Service]
          Type=simple
          User=ntfy-webhook
          Group=ntfy-webhook
          ExecStart=/usr/bin/python3 /usr/local/bin/ntfy-webhook.py
          Restart=always
          RestartSec=5

          [Install]
          WantedBy=multi-user.target
        mode: '0644'
      notify:
        - reload systemd
        - restart ntfy webhook

    - name: Create blackbox targets updater systemd service
      copy:
        dest: /etc/systemd/system/update-blackbox-targets.service
        content: |
          [Unit]
          Description=Update Blackbox Exporter Targets from etcd
          After=network.target

          [Service]
          Type=oneshot
          User=root
          ExecStart=/usr/bin/python3 /usr/local/lib/cluster/update-blackbox-targets
        mode: '0644'
      notify: reload systemd

    - name: Create blackbox targets updater systemd timer
      copy:
        dest: /etc/systemd/system/update-blackbox-targets.timer
        content: |
          [Unit]
          Description=Update Blackbox Exporter Targets every 5 minutes
          Requires=update-blackbox-targets.service

          [Timer]
          OnBootSec=1min
          OnUnitActiveSec=5min
          AccuracySec=30s

          [Install]
          WantedBy=timers.target
        mode: '0644'
      notify: reload systemd

    - name: Enable and start Prometheus services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
        daemon_reload: yes
      loop:
        - prometheus
        - prometheus-node-exporter
        - prometheus-alertmanager
        - prometheus-blackbox-exporter
        - ntfy-webhook
        - update-blackbox-targets.timer

    - name: Create Grafana provisioning directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "472"
        group: "472"
        mode: '0755'
      loop:
        - /etc/grafana-docker/provisioning/datasources
        - /etc/grafana-docker/provisioning/dashboards
        - /var/lib/grafana-docker/dashboards

    - name: Configure Grafana datasources for Docker
      template:
        src: grafana-datasources-docker.yml.j2
        dest: /etc/grafana-docker/provisioning/datasources/datasources.yml
        owner: "472"
        group: "472"
        mode: '0644'
      notify: restart grafana

    - name: Configure Grafana dashboard providers
      copy:
        src: grafana-dashboards.yml
        dest: /etc/grafana-docker/provisioning/dashboards/dashboards.yml
        owner: "472"
        group: "472"
        mode: '0644'
      notify: restart grafana

    - name: Install YCluster overview dashboard
      copy:
        src: ycluster-overview-dashboard.json
        dest: /var/lib/grafana-docker/dashboards/ycluster-overview.json
        owner: "472"
        group: "472"
        mode: '0644'
      notify: restart grafana

    - name: Install Grafana dashboards
      include_tasks: install_dashboard.yml
      vars:
        dashboard_name: "{{ item.name }}"
        dashboard_url: "{{ item.url }}"
        dashboard_sha256: "{{ item.sha256 }}"
        dashboard_filename: "{{ item.filename }}"
      loop:
        - name: "Node Exporter Full"
          url: "https://grafana.com/api/dashboards/1860/revisions/41/download"
          sha256: "132c20c446b28f0348183bd2980fd2e7a2dde3daab4d26c8605a5e117049953b"
          filename: "node-exporter-full.json"
        - name: "Ceph - Cluster"
          url: "https://grafana.com/api/dashboards/2842/revisions/18/download"
          sha256: "3e12f352c7ed91d3b9440c78ea8cb0549215caa6e2da8b78df741322a4da3402"
          filename: "ceph-cluster.json"
        - name: "Blackbox Exporter"
          url: "https://grafana.com/api/dashboards/7587/revisions/3/download"
          sha256: "ce403bb878e22dd250775b7aa8521913e6201741177ca954fa7a4fb1dd898fac"
          filename: "blackbox-exporter.json"

    - name: Create Docker network for Grafana
      docker_network:
        name: grafana-net
        driver: bridge

    - name: Run Grafana Docker container
      docker_container:
        name: grafana
        image: grafana/grafana:latest
        state: started
        restart_policy: unless-stopped
        networks:
          - name: grafana-net
        ports:
          - "3030:3000"
        volumes:
          - /var/lib/grafana-docker:/var/lib/grafana
          - /etc/grafana-docker/provisioning:/etc/grafana/provisioning:ro
        etc_hosts:
          host.docker.internal: host-gateway
        env:
          GF_ANALYTICS_REPORTING_ENABLED: "false"
          GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
          GF_ANALYTICS_CHECK_FOR_PLUGIN_UPDATES: "false"
          GF_PLUGINS_PREINSTALL_DISABLED: "true"
          GF_SECURITY_ADMIN_USER: "admin"
          GF_SECURITY_ADMIN_PASSWORD: "{{ grafana_admin_password | default('admin') }}"
          GF_SECURITY_SECRET_KEY: "{{ grafana_secret_key | default('SW2YcwTIb9zpOOhoPsMm') }}"
          GF_USERS_ALLOW_SIGN_UP: "false"
          GF_USERS_ALLOW_ORG_CREATE: "false"
          GF_AUTH_ANONYMOUS_ENABLED: "true"
          GF_AUTH_ANONYMOUS_ORG_ROLE: "Viewer"
          GF_SECURITY_ALLOW_EMBEDDING: "true"
          GF_SERVER_ROOT_URL: "http://localhost:3030/grafana/"
          GF_SERVER_SERVE_FROM_SUB_PATH: "true"
          GF_SERVER_DOMAIN: "localhost"

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart prometheus
      systemd:
        name: prometheus
        state: restarted

    - name: restart alertmanager
      systemd:
        name: prometheus-alertmanager
        state: restarted

    - name: restart grafana
      docker_container:
        name: grafana
        state: started
        restart: yes

    - name: restart ntfy webhook
      systemd:
        name: ntfy-webhook
        state: restarted

    - name: restart node exporter
      systemd:
        name: prometheus-node-exporter
        state: restarted
